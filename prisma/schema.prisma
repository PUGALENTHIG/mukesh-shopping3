// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// App schema
model Post {
  id        String     @id @default(cuid())
  content   String
  mediaUrls String[]
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]
  echoes     Echo[]
  comments  Comment[]

  @@unique([createdAt, id])
  @@index([authorId])
}
model Echo {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  author    User      @relation("AuthoredEchoes", fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  echoer User     @relation("EchoedPosts", fields: [echoerId], references: [id])
  echoerId String

  @@index([authorId])
  @@index([postId])
  @@index([echoerId])

}

model Like {
  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

@@id([userId, postId])
@@index([userId])
@@index([postId])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  mediaUrls String[]
  createdAt DateTime  @default(now())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  author    User      @relation("comments", fields: [authorId], references: [id])
  authorId  String
  parent    Comment?  @relation("replies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parentId  String?
  replies   Comment[] @relation("replies")
  

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model Search {
  id            String    @id @default(cuid())
  query         String
  type          String // 'user' | 'post' | 'any'
  user          User      @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId])
}


// Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId]) 
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]

    verified      Boolean   @default(false)
    bio           String?
    badge         String?
    links         String[]
    username      String?    @unique
    banner        String?
    posts         Post[]
    likes         Like[]
    authoredEchoes Echo[]   @relation("AuthoredEchoes")
    echoedPosts   Echo[]    @relation("EchoedPosts")
    comments      Comment[] @relation("comments")    
    following     User[]    @relation("Followers")
    followers     User[]    @relation("Followers")
    searches      Search[] 
    
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

